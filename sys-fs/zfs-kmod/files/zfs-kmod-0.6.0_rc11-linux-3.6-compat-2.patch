From 3c203610756f98f275c7c9f731d67a38b1111509 Mon Sep 17 00:00:00 2001
From: Yuxuan Shui <yshuiv7@gmail.com>
Date: Fri, 12 Oct 2012 21:40:53 +0800
Subject: [PATCH] Linux 3.6 compat, sget()

As of Linux commit 9249e17fe094d853d1ef7475dd559a2cc7e23d42 the
mount flags are now passed to sget() so they can be used when
initializing a new superblock.

ZFS never uses sget() in this fashion so we can simply pass a
zero and add a zpl_sget() compatibility wrapper.

Signed-off-by: Yuxuan Shui <yshuiv7@gmail.com>
Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
Issue #873
---
 config/kernel-sget-args.m4 |   23 +++++++++++++++++++++++
 config/kernel.m4           |    1 +
 include/linux/vfs_compat.h |   10 ++++++++++
 module/zfs/zfs_ctldir.c    |    4 ++--
 4 files changed, 36 insertions(+), 2 deletions(-)
 create mode 100644 config/kernel-sget-args.m4

diff --git a/config/kernel-sget-args.m4 b/config/kernel-sget-args.m4
new file mode 100644
index 0000000..9d17459
--- /dev/null
+++ b/config/kernel-sget-args.m4
@@ -0,0 +1,23 @@
+dnl #
+dnl # 3.6 API change,
+dnl # 'sget' now takes the mount flags as an argument.
+dnl #
+AC_DEFUN([ZFS_AC_KERNEL_5ARG_SGET],
+	[AC_MSG_CHECKING([whether sget() wants 5 args])
+	ZFS_LINUX_TRY_COMPILE([
+		#include <linux/fs.h>
+	],[
+		struct file_system_type *type = NULL;
+		int (*test)(struct super_block *,void *) = NULL;
+		int (*set)(struct super_block *,void *) = NULL;
+		int flags = 0;
+		void *data = NULL;
+		(void) sget(type, test, set, flags, data);
+	],[
+		AC_MSG_RESULT(yes)
+		AC_DEFINE(HAVE_5ARG_SGET, 1, [sget() wants 5 args])
+	],[
+		AC_MSG_RESULT(no)
+	])
+])
+
diff --git a/config/kernel.m4 b/config/kernel.m4
index 89b0a98..3a144a3 100644
--- a/config/kernel.m4
+++ b/config/kernel.m4
@@ -68,6 +68,7 @@ AC_DEFUN([ZFS_AC_CONFIG_KERNEL], [
 	ZFS_AC_KERNEL_BDI_SETUP_AND_REGISTER
 	ZFS_AC_KERNEL_SET_NLINK
 	ZFS_AC_KERNEL_ELEVATOR_CHANGE
+	ZFS_AC_KERNEL_5ARG_SGET
 
 	AS_IF([test "$LINUX_OBJ" != "$LINUX"], [
 		KERNELMAKE_PARAMS="$KERNELMAKE_PARAMS O=$LINUX_OBJ"
diff --git a/include/linux/vfs_compat.h b/include/linux/vfs_compat.h
index 9343f99..7181625 100644
--- a/include/linux/vfs_compat.h
+++ b/include/linux/vfs_compat.h
@@ -131,4 +131,14 @@
 #define clear_inode(ip)		end_writeback(ip)
 #endif /* HAVE_EVICT_INODE && !HAVE_CLEAR_INODE */
 
+/*
+ * 3.6 API change,
+ * The sget() helper function now takes the mount flags as an argument.
+ */
+#ifdef HAVE_5ARG_SGET
+#define zpl_sget(type, cmp, set, fl, mtd)	sget(type, cmp, set, fl, mtd)
+#else
+#define zpl_sget(type, cmp, set, fl, mtd)	sget(type, cmp, set, mtd)
+#endif /* HAVE_5ARG_SGET */
+
 #endif /* _ZFS_VFS_H */
diff --git a/module/zfs/zfs_ctldir.c b/module/zfs/zfs_ctldir.c
index c49d717..55d1696 100644
--- a/module/zfs/zfs_ctldir.c
+++ b/module/zfs/zfs_ctldir.c
@@ -920,8 +920,8 @@ struct inode *
 		 * race cannot occur to an expired mount point because
 		 * we hold the zsb->z_ctldir_lock to prevent the race.
 		 */
-		sbp = sget(&zpl_fs_type, zfsctl_test_super,
-		    zfsctl_set_super, &id);
+		sbp = zpl_sget(&zpl_fs_type, zfsctl_test_super,
+		    zfsctl_set_super, 0, &id);
 		if (IS_ERR(sbp)) {
 			error = -PTR_ERR(sbp);
 		} else {
-- 
1.7.10

